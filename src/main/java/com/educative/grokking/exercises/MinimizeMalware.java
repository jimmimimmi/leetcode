package com.educative.grokking.exercises;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

// https://leetcode.com/problems/minimize-malware-spread/description/
public class MinimizeMalware {

    // union infected +=, rank +=
    // go through initial, find parent, find rank and infected count. If

    private static int findParent(int n, Map<Integer, Integer> parents) {
        parents.putIfAbsent(n, n);

        var parent = parents.get(n);
        if (parent.equals(n)) {
            return parent;
        } else {
            var grandParent = findParent(parent, parents);
            parents.put(n, grandParent);
            return grandParent;
        }
    }

    private static void union(int a, int b,
                              Map<Integer, Integer> parents,
                              Map<Integer, Integer> ranks
    ) {
        var parA = findParent(a, parents);
        var parB = findParent(b, parents);

        ranks.putIfAbsent(parA, 1);
        ranks.putIfAbsent(parB, 1);

        if (parA == parB) {
            return;
        }

        var rankA = ranks.get(parA);
        var rankB = ranks.get(parB);

        if (rankA >= rankB) {
            parents.put(parB, parA);
            ranks.put(parA, rankA + rankB);
        } else {
            parents.put(parA, parB);
            ranks.put(parB, rankA + rankB);
        }
    }


    public static int minMalwareSpread(int[][] graph, int[] initial) {


        var parents = new HashMap<Integer, Integer>();
        var ranks = new HashMap<Integer, Integer>();
        for (int i = 0; i < graph.length; i++) {
            for (int j = i + 1; j < graph.length; j++) {
                if (graph[i][j] == 1) {
                    union(i, j, parents, ranks);
                }
            }
        }

        int[] count = new int[graph.length];
        for (int node : initial)
            count[findParent(node, parents)]++;

        int ans = -1, ansSize = -1;
        for (int node : initial) {
            int root = findParent(node, parents);
            ranks.putIfAbsent(root, 1);
            if (count[root] == 1) {  // unique color
                int rootSize = ranks.get(root);
                if (rootSize > ansSize) {
                    ansSize = rootSize;
                    ans = node;
                } else if (rootSize == ansSize && node < ans) {
                    ans = node;
                }
            }
        }

        if (ans == -1) {
            ans = Integer.MAX_VALUE;
            for (int node : initial)
                ans = Math.min(ans, node);
        }
        return ans;
    }
}
